/*Создать базу данных "Студенты"
1. Записать инструкцию на SQL для создания 
таблицы СТУДЕНТЫ со следующими полями: №_Студента, 
Фамилия, Имя, Курс, Группа, Город, Факультет. 
Назначить первичный ключ таблицы СТУДЕНТЫ. 
Значения поля КУРС находятся в пределах от 1 до 6. 
Значения поля ГРУППА находятся в пределах от 1 до 20.
 По умолчанию полю Город присваивается значение "Старый Оскол".
  Значение поля Факультет берется из следующего списка: 
  {математический, физический, экономический, исторический, филологический, юридический, биологический}. Поля №_Студента, Фамилия, Имя, Курс, Группа не могут принимать значений NULL.
Создание БД:*/
use master;
create database sellingDB
ON (NAME= studentDB_dat,
FILENAME = 'd:\student.mdf',
SIZE = 10,
MAXSIZE = 100,
FILEGROWTH = 5)
LOG ON
(NAME= studentDB_log,
FILENAME = 'd:\ student.ldf',
SIZE = 40,
MAXSIZE = 100,
FILEGROWTH = 10);
/*Создание таблицы Студенты:*/
use studentDB;
create table Студенты
(Номер_студента int not null primary key,
Фамилия varchar(50) not null,
Имя varchar(50) not null,
Курс int not null check (Курс>=1 and Курс<=6),
Группа int not null check (Группа>=1 and Группа<=20),
Город varchar(30) default 'Старый Оскол',
Факультет VARCHAR(50) CHECK(Факультет IN ('Математический', 'Физический', 'Экономический', 'Исторический', 'Филологический', 'Юридический', 'Биологический')));

/*2. Записать инструкцию на SQL для создания таблицы ПРЕДМЕТЫ со следующими полями: №_Предмета, Название_предмета, Преподаватель, Должность_преподавателя, Семестр, ЧАСЫ. Назначить первичный ключ таблицы. Поле Название_предмета не может принимать значение NULL. Значения поля Семестр находятся в пределах от 1 до 12. По умолчанию полю Часы присваивается значение "0.0". Значение поля Должность берется из следующего списка: {ассистент, преподаватель, старший преподаватель, доцент, профессор}. Поля №_Предмета, Семестр не могут принимать значений NULL.
Создание таблицы Предметы:*/

create table Предметы 
(Номер_предмета int not null primary key, 
Название_предмета varchar(50) not null, 
Преподаватель varchar(50), 
Должность_преподавателя varchar(50) check(Должность_преподавателя in('ассистент','преподаватель','старший_преподаватель','доцент','профессор'),Семестр int not null check (Семестр>=1 and Семестр<=12), 
Часы decimal default 0.0,);


/*3. Записать инструкцию на SQL для создания таблицы РЕЗУЛЬТАТЫ_СЕССИИ со следующими полями: №_Студента, №_Предмета, Дата_Сдачи, Оценка. Поля №_Студента, №_Предмета ЯВЛЯЮТСЯ первичными ключами таблицы РЕЗУЛЬТАТЫ_СЕССИИ. Значения поля Оценка находятся в пределах от 0 до 10; кроме того, по умолчанию принимается оценка 0. Поля №_Студента, №_Предмета не могут принимать значений NULL яется внешним ключом к таблице СТУДЕНТЫ, a поле №_Предмета является внешним ключом к таблице ПРЕДМЕТЫ (типы связей определить произвольно). Для по-лей №_Студента и №_Предмета установить каскадные режимы обеспечения целостности для команд UPDATE и DELETE.
Создание таблицы Результаты сессии:*/
use studentDB
create table Результаты_сессии
(Номер_студента int not null,
Номер_предмета int not null,
Дата_сдачи date,
Оценка int check (Оценка>=1 and Оценка<=10),
primary key (Номер_студента, Номер_предмета),
FOREIGN KEY (Номер_студента) REFERENCES Студенты(Номер_студента),
FOREIGN KEY (Номер_предмета) REFERENCES Предметы(Номер_предмета)
ON DELETE CASCADE
ON UPDATE CASCADE);

/*Создать хранимую процедуру, выводящую общее количество студентов, обучающихся в вузе, и среднюю оценку;*/
use studentDB;
Go
CREATE PROCEDURE CountStudent 
AS
SELECT count(Distinct Номер_студента) as 'Количество студентов', AVG(Оценка) as 'Средняя оценка'
from Результаты_сессии
  

/*Создать хранимую процедуру, выводящую средний бал успеваемости по каждому факультету и общее количество студентов факультета;*/
Go
CREATE PROCEDURE CountFakult 
AS
Select Факультет, (Select AVG(cast(Результаты_сессии.Оценка as float))) As 'Средняя_оценка',
(Select Count(Distinct Студенты.Номер_студента)) As 'Количество студентов' from Студенты, Результаты_сессии
where (Результаты_сессии.Номер_студента = Студенты.Номер_студента)
Group by Факультет

/*Создать хранимую процедуру, выводящую общее количество часов для каждого преподавателя;*/
Go
CREATE PROCEDURE SumHour 
AS
Select Преподаватель, Sum(Часы) as 'Часы(общ.)' from Предметы
Group by Преподаватель

/*Создайте триггер, который будет выводить сообщение о добавлении, обновлении или удаление данных в таблице «СТУДЕНТЫ».*/
go
create trigger trig_1
on Студенты
after insert, update, delete
as
SET NOCOUNT ON;
IF EXISTS (SELECT [Номер_студента] FROM Inserted) 
	begin
	print 'Добавление записей в таблицу Студенты'
	end
IF UPDATE (Номер_студента)  
	BEGIN
	print 'Изменение записей в таблице Студенты'
	end
IF EXISTS (SELECT [Номер_студента] FROM DELETED)
	BEGIN
	print 'Удаление записей в таблице Студенты'
	end

/*Создайте триггер, который не позволит добавить нового студента, если уже есть как минимум 10 человек.*/
go
alter trigger trig_2
on Студенты
for insert
as
begin
	if(select count(Студенты.Номер_студента) from Студенты)>=7
	begin
		rollback tran
		print'больше 7-ми запесей'
	end
end

/*Создать триггер, который не позволит обновить дату рождения студента*/
go
alter trigger trig_3
on Студенты
for update
as
begin
	if(update(Имя))
	begin
 
		rollback tran
		print'нельзя изменить номер студента'
	end
end

/*Создать триггер, реализующий каскадное изменение в таблице РЕЗУЛЬТАТЫ_СЕССИИ при изменении названия предметов в таблице ПРЕДМЕТЫ.*/
go
create trigger trig_4
on Предметы
after update
as
begin
	if exists(select Название_предмета from inserted)
	begin
		update Результаты_сессии
		set Номер_предмета=(select Название_предмета from inserted where Номер_предмета=inserted.Номер_предмета)
		where Номер_предмета in (select Номер_предмета from inserted)
	end
end
 
/*Создать триггер, реализующий каскадное удаление в таблице РЕЗУЛЬТАТЫ_СЕССИИ  при  удалении  записей в  таблице СТУДЕНТЫ*/
go
create trigger trig_5
on Студенты
after delete
as
begin
	if exists(select * from deleted)
	begin
		delete from Результаты_сессии
		where Номер_студента in (select Номер_студента from deleted)
	end
end

